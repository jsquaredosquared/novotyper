from cyclopts import App
from novotyper import genotyper as gt


fasta_path = "/export/home/jeffrey/Documents/novocraft-prototype-sv-genotyper/previous_outputs/alt_scaffolds.fa"
vcf_path = "/export/home/jeffrey/Documents/novocraft-prototype-sv-genotyper/resources/sv-vcf-files/HG002_SVs_Tier1_v0.6.ALL.vcf"
sample = "HG002"
mapq_bedgraph = "/export/home/jeffrey/Documents/novocraft-prototype-sv-genotyper/previous_outputs/HG002/HG002.sv.sorted.bedgraph"


novotyper = App(help="Prototype structural variant genotyper using NovoAlign MAPQ")


@novotyper.command
def genotype(sv_vcf: str, alts_fasta: str, mapq_bedgraph: str, sample: str, out_dir: str="outputs"):
    """
    Predict the genotypes of SVs after running novoSV, and calculate the performance characteristics for prototyping and benchmarking.

    Parameters
    ----------
    sv_vcf: str
        Path to the VCF file containing the SVs to be genotyped. For example, this can be a catalogue of SVs of interest, or the output of an SV caller.
    alts_fasta: str
        Path to the alt scaffolds fasta file generated by running `novoSV vcf2altscaffold`.
    mapq_bedgraph: str
        Path to a sorted bedgraph file containing the MAPQ information, generated by running `novoSV zabedgraph` and sorting the output.
    sample: str
        The ID of the sample in the VCF to be genotyped.
    out_dir: str
        Path to the directory in which output files will be placed. The output files include `performance.md` (which summarizes the performance characteristics) and `.svg` files showing the distribution of the MAPQ ratio.
    """

    vcf_info = gt.extract_info_from_vcf(sv_vcf, sample)
    mapq_bedgraph = gt.read_mapq_bedgraph(mapq_bedgraph)

    test_locs = (
        alts_fasta
        |> gt.read_alts_fasta_descriptions
        |> lift(,)(gt.extract_ref_locs_of_alts, gt.extract_sv_locs)
        |*> gt.join_ref_and_sv_locs
        |> gt.define_alt_test_locs
        |> gt.add_vcf_info_to_test_locs$(?, vcf_info)
        |> gt.get_pass_variants
    )

    ratio_results = (
        test_locs
        |> lift(,)(gt.get_ref_test_locs, gt.get_alt_test_locs)
        |> map$(gt.calculate_mapq$(?, mapq_bedgraph))
        |*> gt.join_and_calculate_mapq_ratio$(test_locs)
        |> gt.predict_genotype$(?, 0.2, 2.8)
    )

    gt.calculate_performance(ratio_results) |> print$(file=f"{out_dir}/summary.md")
    
    mapq_chart, mapq_chart_detailed, sqrt_mapq_chart, cbrt_mapq_chart = plot_mapq_distribution(results)
    mapq_chart.save(f"{out_dir}/mapq_chart.svg")
    mapq_chart_detailed.save(f"{out_dir}/mapq_chart_detailed.svg")
    sqrt_mapq_chart.save(f"{out_dir}/sqrt_mapq_chart.svg")
    cbrt_mapq_chart.save(f"{out_dir}/cbrt_mapq_chart.svg")

def main():
    novotyper()

if __name__ == "__main__":
    main()