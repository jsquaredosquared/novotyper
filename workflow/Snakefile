from os.path import basename

configfile: "config/config.yaml"


# Must be run locally because novoSV does not work in HPC.
localrules:
    make_alt_scaffolds,
    make_bedgraph_file,


rule all:
    input:
        collect("outputs/{sample}/sv.sorted.bedgraph", sample=config["samples"]),


rule run_novoindex_on_original_reference:
    input:
        "resources/reference-genomes/{reference}.fa"
    output:
        "resources/reference-genomes/{reference}.fa.nix"
    log:
        "logs/novoindex_{reference}.log"
    shell:
        "{config[novoindex]} "
        "{output} "
        "{input} "
        "2> {log}"


rule make_alt_scaffolds:
    input:
        sv_vcf=lambda wildcards: config["truth_set_vcf"][wildcards.sample],
        reference=lambda wildcards: config["reference"][wildcards.sample],
        ref_index=lambda wildcards: f"{config["reference"][wildcards.sample]}.nix"
    output:
        alt_scaffolds_fasta="outputs/{sample}/alt_scaffolds.fa",
    params:
        context=config["context"],
        min_var_len=config["min_var_len"],
    log:
        "logs/make_alt_scaffolds_for_{sample}.log",
    shell:
        "{config[novosv]} vcf2altscaffold "
        "-c {params.context} "
        "-v {params.min_var_len} "
        "--nix {input.reference}.nix "
        "{input.sv_vcf} "
        "> {output} "
        "2> {log}"


rule run_novoindex:
    input:
        alts_fasta="outputs/{sample}/alt_scaffolds.fa",
        reference=lambda wildcards: config["reference"][wildcards.sample]
    output:
        new_novoindex="outputs/{sample}/{reference}.sv.nix",
    log:
        "logs/novoindex_{sample}_{reference}.log",
    shell:
        "{config[novoindex]} "
        "{output.new_novoindex} "
        "{input.reference} "
        "{input.alts_fasta} "
        "2> {log}"


rule align_sample:
    input:
        reads=lambda wildcards: config["samples"][wildcards.sample],
        spiked_index=lambda wildcards: f"outputs/{wildcards.sample}/{basename(config["reference"][wildcards.sample])}.sv.nix"
    output:
        "outputs/{sample}/sv.bam",
    threads: 60
    log:
        "logs/align_{sample}.log",
    shell:
        "({config[novoalign]} -c {threads} -d {input.spiked_index} "
        "-f {input.reads} "
        "-o BAM '@RG\tID:{wildcards.sample}\tSM:{wildcards.sample}\tPL:ILLUMINA\tLB:sv' "
        "| {config[novosort]} -m 8G -i -o {output} - "
        ")2> {log}"


rule make_bedgraph_file:
    input:
        bam_file="outputs/{sample}/sv.bam",
        alt_scaffolds_fasta="outputs/{sample}/alt_scaffolds.fa",
        spiked_index=lambda wildcards: f"outputs/{wildcards.sample}/{basename(config["reference"][wildcards.sample])}.sv.nix",
    output:
        bedgraph_file=multiext(
            "outputs/{sample}/sv", ".bedgraph", ".sorted.bedgraph"
        ),

    log:
        "logs/make_bedgraph_file_{sample}.log",
    shell:
        "({config[novosv]} zabedgraph "
        "-a {input.alt_scaffolds_fasta} "
        "-b {input.bam_file} "
        "> {output.bedgraph_file[0]} "
        "&& {config[novoutil]} headers {input.spiked_index} "
        "| awk 'NR > 1 {{print substr($4,2),$2}}' > chrom.sizes "
        "&& awk '$1 == \"track\" {{print; exit}}' {output.bedgraph_file[0]} > {output.bedgraph_file[1]} "
        '&& awk \'$1 == "#" || $1 == "track" {{next}} {{print}}\' {output.bedgraph_file[0]} | LC_ALL=C sort -k1,1 -k2,2n >> {output.bedgraph_file[1]} '
        ")2> {log}"


rule run_novotyper:
    input: 
        sv_vcf=lambda wildcards: config["truth_set_vcf"][wildcards.sample],
        alt_scaffolds_fasta="outputs/{sample}/alt_scaffolds.fa",
        mapq_bedgraph="outputs/{sample}/sv.sorted.bedgraph"
    output:
        summary_stats="outputs/{sample}/summary.md",
        mapq_chart="outputs/{sample}/mapq_chart.svg",
    log:
        "logs/genotype_{sample}.log"
    shell:
        "(novotyper genotype "
        "--sv-vcf {input.sv_vcf} "
        "--alts-fasta {input.alt_scaffolds_fasta} "
        "--mapq-bedgraph {input.mapq_bedgraph} "
        "--sample {wildcards.sample} "
        "--out-dir outputs/{wildcards.sample} "
        ")2> {log}"


# rule samtools_faidx:
#     input:
#         "outputs/{sample}/alt_scaffolds.fa",
#     output:
#         new_fasta_gz=f"outputs/{{sample}}/{basename(config["reference"].replace(".fa", ".sv.fa.gz"))}",
#     conda:
#         "envs/samtools.yaml"
#     log:
#         "logs/samtools_faidx_{sample}.log",
#     threads: 8
#     shell:
#         "(cat {config[reference]} {input} | "
#         "{config[novoutil]} bgzf - "
#         "> {output.new_fasta_gz} "
#         "&& samtools faidx {output.new_fasta_gz} "
#         ")2> {log}"